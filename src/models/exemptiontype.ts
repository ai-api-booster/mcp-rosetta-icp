/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";

/**
 * ExemptionType is used to indicate if the live balance for an account subject to a BalanceExemption could increase above, decrease below, or equal the computed balance. * greater_or_equal: The live balance may increase above or equal the computed balance. This typically   occurs with staking rewards that accrue on each block. * less_or_equal: The live balance may decrease below or equal the computed balance. This typically   occurs as balance moves from locked to spendable on a vesting account. * dynamic: The live balance may increase above, decrease below, or equal the computed balance. This   typically occurs with tokens that have a dynamic supply.
 */
export const ExemptionType = {
  GreaterOrEqual: "greater_or_equal",
  LessOrEqual: "less_or_equal",
  Dynamic: "dynamic",
} as const;
/**
 * ExemptionType is used to indicate if the live balance for an account subject to a BalanceExemption could increase above, decrease below, or equal the computed balance. * greater_or_equal: The live balance may increase above or equal the computed balance. This typically   occurs with staking rewards that accrue on each block. * less_or_equal: The live balance may decrease below or equal the computed balance. This typically   occurs as balance moves from locked to spendable on a vesting account. * dynamic: The live balance may increase above, decrease below, or equal the computed balance. This   typically occurs with tokens that have a dynamic supply.
 */
export type ExemptionType = ClosedEnum<typeof ExemptionType>;

/** @internal */
export const ExemptionType$inboundSchema: z.ZodNativeEnum<
  typeof ExemptionType
> = z.nativeEnum(ExemptionType);

/** @internal */
export const ExemptionType$outboundSchema: z.ZodNativeEnum<
  typeof ExemptionType
> = ExemptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExemptionType$ {
  /** @deprecated use `ExemptionType$inboundSchema` instead. */
  export const inboundSchema = ExemptionType$inboundSchema;
  /** @deprecated use `ExemptionType$outboundSchema` instead. */
  export const outboundSchema = ExemptionType$outboundSchema;
}
