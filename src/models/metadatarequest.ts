/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MetadataRequestMetadata = {};

/**
 * A MetadataRequest is utilized in any request where the only argument is optional metadata.
 */
export type MetadataRequest = {
  metadata?: MetadataRequestMetadata | undefined;
};

/** @internal */
export const MetadataRequestMetadata$inboundSchema: z.ZodType<
  MetadataRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRequestMetadata$Outbound = {};

/** @internal */
export const MetadataRequestMetadata$outboundSchema: z.ZodType<
  MetadataRequestMetadata$Outbound,
  z.ZodTypeDef,
  MetadataRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRequestMetadata$ {
  /** @deprecated use `MetadataRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = MetadataRequestMetadata$inboundSchema;
  /** @deprecated use `MetadataRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = MetadataRequestMetadata$outboundSchema;
  /** @deprecated use `MetadataRequestMetadata$Outbound` instead. */
  export type Outbound = MetadataRequestMetadata$Outbound;
}

export function metadataRequestMetadataToJSON(
  metadataRequestMetadata: MetadataRequestMetadata,
): string {
  return JSON.stringify(
    MetadataRequestMetadata$outboundSchema.parse(metadataRequestMetadata),
  );
}

export function metadataRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRequestMetadata' from JSON`,
  );
}

/** @internal */
export const MetadataRequest$inboundSchema: z.ZodType<
  MetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.lazy(() => MetadataRequestMetadata$inboundSchema).optional(),
});

/** @internal */
export type MetadataRequest$Outbound = {
  metadata?: MetadataRequestMetadata$Outbound | undefined;
};

/** @internal */
export const MetadataRequest$outboundSchema: z.ZodType<
  MetadataRequest$Outbound,
  z.ZodTypeDef,
  MetadataRequest
> = z.object({
  metadata: z.lazy(() => MetadataRequestMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRequest$ {
  /** @deprecated use `MetadataRequest$inboundSchema` instead. */
  export const inboundSchema = MetadataRequest$inboundSchema;
  /** @deprecated use `MetadataRequest$outboundSchema` instead. */
  export const outboundSchema = MetadataRequest$outboundSchema;
  /** @deprecated use `MetadataRequest$Outbound` instead. */
  export type Outbound = MetadataRequest$Outbound;
}

export function metadataRequestToJSON(
  metadataRequest: MetadataRequest,
): string {
  return JSON.stringify(MetadataRequest$outboundSchema.parse(metadataRequest));
}

export function metadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRequest' from JSON`,
  );
}
