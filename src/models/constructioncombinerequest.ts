/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NetworkIdentifier,
  NetworkIdentifier$inboundSchema,
  NetworkIdentifier$Outbound,
  NetworkIdentifier$outboundSchema,
} from "./networkidentifier.js";
import {
  Signature,
  Signature$inboundSchema,
  Signature$Outbound,
  Signature$outboundSchema,
} from "./signature.js";

/**
 * ConstructionCombineRequest is the input to the `/construction/combine` endpoint. It contains the unsigned transaction blob returned by `/construction/payloads` and all required signatures to create a network transaction.
 */
export type ConstructionCombineRequest = {
  /**
   * The network_identifier specifies which network a particular object is associated with.
   */
  networkIdentifier: NetworkIdentifier;
  unsignedTransaction: string;
  signatures: Array<Signature>;
};

/** @internal */
export const ConstructionCombineRequest$inboundSchema: z.ZodType<
  ConstructionCombineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network_identifier: NetworkIdentifier$inboundSchema,
  unsigned_transaction: z.string(),
  signatures: z.array(Signature$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "network_identifier": "networkIdentifier",
    "unsigned_transaction": "unsignedTransaction",
  });
});

/** @internal */
export type ConstructionCombineRequest$Outbound = {
  network_identifier: NetworkIdentifier$Outbound;
  unsigned_transaction: string;
  signatures: Array<Signature$Outbound>;
};

/** @internal */
export const ConstructionCombineRequest$outboundSchema: z.ZodType<
  ConstructionCombineRequest$Outbound,
  z.ZodTypeDef,
  ConstructionCombineRequest
> = z.object({
  networkIdentifier: NetworkIdentifier$outboundSchema,
  unsignedTransaction: z.string(),
  signatures: z.array(Signature$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    networkIdentifier: "network_identifier",
    unsignedTransaction: "unsigned_transaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstructionCombineRequest$ {
  /** @deprecated use `ConstructionCombineRequest$inboundSchema` instead. */
  export const inboundSchema = ConstructionCombineRequest$inboundSchema;
  /** @deprecated use `ConstructionCombineRequest$outboundSchema` instead. */
  export const outboundSchema = ConstructionCombineRequest$outboundSchema;
  /** @deprecated use `ConstructionCombineRequest$Outbound` instead. */
  export type Outbound = ConstructionCombineRequest$Outbound;
}

export function constructionCombineRequestToJSON(
  constructionCombineRequest: ConstructionCombineRequest,
): string {
  return JSON.stringify(
    ConstructionCombineRequest$outboundSchema.parse(constructionCombineRequest),
  );
}

export function constructionCombineRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConstructionCombineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConstructionCombineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstructionCombineRequest' from JSON`,
  );
}
