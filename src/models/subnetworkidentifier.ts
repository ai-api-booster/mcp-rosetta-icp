/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SubNetworkIdentifierMetadata = {};

/**
 * In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains.
 */
export type SubNetworkIdentifier = {
  network: string;
  metadata?: SubNetworkIdentifierMetadata | undefined;
};

/** @internal */
export const SubNetworkIdentifierMetadata$inboundSchema: z.ZodType<
  SubNetworkIdentifierMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubNetworkIdentifierMetadata$Outbound = {};

/** @internal */
export const SubNetworkIdentifierMetadata$outboundSchema: z.ZodType<
  SubNetworkIdentifierMetadata$Outbound,
  z.ZodTypeDef,
  SubNetworkIdentifierMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubNetworkIdentifierMetadata$ {
  /** @deprecated use `SubNetworkIdentifierMetadata$inboundSchema` instead. */
  export const inboundSchema = SubNetworkIdentifierMetadata$inboundSchema;
  /** @deprecated use `SubNetworkIdentifierMetadata$outboundSchema` instead. */
  export const outboundSchema = SubNetworkIdentifierMetadata$outboundSchema;
  /** @deprecated use `SubNetworkIdentifierMetadata$Outbound` instead. */
  export type Outbound = SubNetworkIdentifierMetadata$Outbound;
}

export function subNetworkIdentifierMetadataToJSON(
  subNetworkIdentifierMetadata: SubNetworkIdentifierMetadata,
): string {
  return JSON.stringify(
    SubNetworkIdentifierMetadata$outboundSchema.parse(
      subNetworkIdentifierMetadata,
    ),
  );
}

export function subNetworkIdentifierMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SubNetworkIdentifierMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubNetworkIdentifierMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubNetworkIdentifierMetadata' from JSON`,
  );
}

/** @internal */
export const SubNetworkIdentifier$inboundSchema: z.ZodType<
  SubNetworkIdentifier,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
  metadata: z.lazy(() => SubNetworkIdentifierMetadata$inboundSchema).optional(),
});

/** @internal */
export type SubNetworkIdentifier$Outbound = {
  network: string;
  metadata?: SubNetworkIdentifierMetadata$Outbound | undefined;
};

/** @internal */
export const SubNetworkIdentifier$outboundSchema: z.ZodType<
  SubNetworkIdentifier$Outbound,
  z.ZodTypeDef,
  SubNetworkIdentifier
> = z.object({
  network: z.string(),
  metadata: z.lazy(() => SubNetworkIdentifierMetadata$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubNetworkIdentifier$ {
  /** @deprecated use `SubNetworkIdentifier$inboundSchema` instead. */
  export const inboundSchema = SubNetworkIdentifier$inboundSchema;
  /** @deprecated use `SubNetworkIdentifier$outboundSchema` instead. */
  export const outboundSchema = SubNetworkIdentifier$outboundSchema;
  /** @deprecated use `SubNetworkIdentifier$Outbound` instead. */
  export type Outbound = SubNetworkIdentifier$Outbound;
}

export function subNetworkIdentifierToJSON(
  subNetworkIdentifier: SubNetworkIdentifier,
): string {
  return JSON.stringify(
    SubNetworkIdentifier$outboundSchema.parse(subNetworkIdentifier),
  );
}

export function subNetworkIdentifierFromJSON(
  jsonString: string,
): SafeParseResult<SubNetworkIdentifier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubNetworkIdentifier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubNetworkIdentifier' from JSON`,
  );
}
