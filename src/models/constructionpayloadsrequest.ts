/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NetworkIdentifier,
  NetworkIdentifier$inboundSchema,
  NetworkIdentifier$Outbound,
  NetworkIdentifier$outboundSchema,
} from "./networkidentifier.js";
import {
  Operation,
  Operation$inboundSchema,
  Operation$Outbound,
  Operation$outboundSchema,
} from "./operation.js";
import {
  PublicKey,
  PublicKey$inboundSchema,
  PublicKey$Outbound,
  PublicKey$outboundSchema,
} from "./publickey.js";

export type ConstructionPayloadsRequestMetadata = {};

/**
 * ConstructionPayloadsRequest is the request to `/construction/payloads`. It contains the network, a slice of operations, and arbitrary metadata that was returned by the call to `/construction/metadata`. Optionally, the request can also include an array of PublicKeys associated with the AccountIdentifiers returned in ConstructionPreprocessResponse.
 */
export type ConstructionPayloadsRequest = {
  /**
   * The network_identifier specifies which network a particular object is associated with.
   */
  networkIdentifier: NetworkIdentifier;
  operations: Array<Operation>;
  metadata?: ConstructionPayloadsRequestMetadata | undefined;
  publicKeys?: Array<PublicKey> | undefined;
};

/** @internal */
export const ConstructionPayloadsRequestMetadata$inboundSchema: z.ZodType<
  ConstructionPayloadsRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ConstructionPayloadsRequestMetadata$Outbound = {};

/** @internal */
export const ConstructionPayloadsRequestMetadata$outboundSchema: z.ZodType<
  ConstructionPayloadsRequestMetadata$Outbound,
  z.ZodTypeDef,
  ConstructionPayloadsRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstructionPayloadsRequestMetadata$ {
  /** @deprecated use `ConstructionPayloadsRequestMetadata$inboundSchema` instead. */
  export const inboundSchema =
    ConstructionPayloadsRequestMetadata$inboundSchema;
  /** @deprecated use `ConstructionPayloadsRequestMetadata$outboundSchema` instead. */
  export const outboundSchema =
    ConstructionPayloadsRequestMetadata$outboundSchema;
  /** @deprecated use `ConstructionPayloadsRequestMetadata$Outbound` instead. */
  export type Outbound = ConstructionPayloadsRequestMetadata$Outbound;
}

export function constructionPayloadsRequestMetadataToJSON(
  constructionPayloadsRequestMetadata: ConstructionPayloadsRequestMetadata,
): string {
  return JSON.stringify(
    ConstructionPayloadsRequestMetadata$outboundSchema.parse(
      constructionPayloadsRequestMetadata,
    ),
  );
}

export function constructionPayloadsRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ConstructionPayloadsRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConstructionPayloadsRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstructionPayloadsRequestMetadata' from JSON`,
  );
}

/** @internal */
export const ConstructionPayloadsRequest$inboundSchema: z.ZodType<
  ConstructionPayloadsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network_identifier: NetworkIdentifier$inboundSchema,
  operations: z.array(Operation$inboundSchema),
  metadata: z.lazy(() => ConstructionPayloadsRequestMetadata$inboundSchema)
    .optional(),
  public_keys: z.array(PublicKey$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "network_identifier": "networkIdentifier",
    "public_keys": "publicKeys",
  });
});

/** @internal */
export type ConstructionPayloadsRequest$Outbound = {
  network_identifier: NetworkIdentifier$Outbound;
  operations: Array<Operation$Outbound>;
  metadata?: ConstructionPayloadsRequestMetadata$Outbound | undefined;
  public_keys?: Array<PublicKey$Outbound> | undefined;
};

/** @internal */
export const ConstructionPayloadsRequest$outboundSchema: z.ZodType<
  ConstructionPayloadsRequest$Outbound,
  z.ZodTypeDef,
  ConstructionPayloadsRequest
> = z.object({
  networkIdentifier: NetworkIdentifier$outboundSchema,
  operations: z.array(Operation$outboundSchema),
  metadata: z.lazy(() => ConstructionPayloadsRequestMetadata$outboundSchema)
    .optional(),
  publicKeys: z.array(PublicKey$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    networkIdentifier: "network_identifier",
    publicKeys: "public_keys",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstructionPayloadsRequest$ {
  /** @deprecated use `ConstructionPayloadsRequest$inboundSchema` instead. */
  export const inboundSchema = ConstructionPayloadsRequest$inboundSchema;
  /** @deprecated use `ConstructionPayloadsRequest$outboundSchema` instead. */
  export const outboundSchema = ConstructionPayloadsRequest$outboundSchema;
  /** @deprecated use `ConstructionPayloadsRequest$Outbound` instead. */
  export type Outbound = ConstructionPayloadsRequest$Outbound;
}

export function constructionPayloadsRequestToJSON(
  constructionPayloadsRequest: ConstructionPayloadsRequest,
): string {
  return JSON.stringify(
    ConstructionPayloadsRequest$outboundSchema.parse(
      constructionPayloadsRequest,
    ),
  );
}

export function constructionPayloadsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConstructionPayloadsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConstructionPayloadsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstructionPayloadsRequest' from JSON`,
  );
}
