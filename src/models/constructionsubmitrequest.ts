/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NetworkIdentifier,
  NetworkIdentifier$inboundSchema,
  NetworkIdentifier$Outbound,
  NetworkIdentifier$outboundSchema,
} from "./networkidentifier.js";

/**
 * The transaction submission request includes a signed transaction.
 */
export type ConstructionSubmitRequest = {
  /**
   * The network_identifier specifies which network a particular object is associated with.
   */
  networkIdentifier: NetworkIdentifier;
  signedTransaction: string;
};

/** @internal */
export const ConstructionSubmitRequest$inboundSchema: z.ZodType<
  ConstructionSubmitRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network_identifier: NetworkIdentifier$inboundSchema,
  signed_transaction: z.string(),
}).transform((v) => {
  return remap$(v, {
    "network_identifier": "networkIdentifier",
    "signed_transaction": "signedTransaction",
  });
});

/** @internal */
export type ConstructionSubmitRequest$Outbound = {
  network_identifier: NetworkIdentifier$Outbound;
  signed_transaction: string;
};

/** @internal */
export const ConstructionSubmitRequest$outboundSchema: z.ZodType<
  ConstructionSubmitRequest$Outbound,
  z.ZodTypeDef,
  ConstructionSubmitRequest
> = z.object({
  networkIdentifier: NetworkIdentifier$outboundSchema,
  signedTransaction: z.string(),
}).transform((v) => {
  return remap$(v, {
    networkIdentifier: "network_identifier",
    signedTransaction: "signed_transaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstructionSubmitRequest$ {
  /** @deprecated use `ConstructionSubmitRequest$inboundSchema` instead. */
  export const inboundSchema = ConstructionSubmitRequest$inboundSchema;
  /** @deprecated use `ConstructionSubmitRequest$outboundSchema` instead. */
  export const outboundSchema = ConstructionSubmitRequest$outboundSchema;
  /** @deprecated use `ConstructionSubmitRequest$Outbound` instead. */
  export type Outbound = ConstructionSubmitRequest$Outbound;
}

export function constructionSubmitRequestToJSON(
  constructionSubmitRequest: ConstructionSubmitRequest,
): string {
  return JSON.stringify(
    ConstructionSubmitRequest$outboundSchema.parse(constructionSubmitRequest),
  );
}

export function constructionSubmitRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConstructionSubmitRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConstructionSubmitRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstructionSubmitRequest' from JSON`,
  );
}
