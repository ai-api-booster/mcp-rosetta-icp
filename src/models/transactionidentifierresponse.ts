/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionIdentifier,
  TransactionIdentifier$inboundSchema,
  TransactionIdentifier$Outbound,
  TransactionIdentifier$outboundSchema,
} from "./transactionidentifier.js";

export type TransactionIdentifierResponseMetadata = {};

/**
 * TransactionIdentifierResponse contains the transaction_identifier of a transaction that was submitted to either `/construction/hash` or `/construction/submit`.
 */
export type TransactionIdentifierResponse = {
  /**
   * The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool.
   */
  transactionIdentifier: TransactionIdentifier;
  metadata?: TransactionIdentifierResponseMetadata | undefined;
};

/** @internal */
export const TransactionIdentifierResponseMetadata$inboundSchema: z.ZodType<
  TransactionIdentifierResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionIdentifierResponseMetadata$Outbound = {};

/** @internal */
export const TransactionIdentifierResponseMetadata$outboundSchema: z.ZodType<
  TransactionIdentifierResponseMetadata$Outbound,
  z.ZodTypeDef,
  TransactionIdentifierResponseMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionIdentifierResponseMetadata$ {
  /** @deprecated use `TransactionIdentifierResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    TransactionIdentifierResponseMetadata$inboundSchema;
  /** @deprecated use `TransactionIdentifierResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    TransactionIdentifierResponseMetadata$outboundSchema;
  /** @deprecated use `TransactionIdentifierResponseMetadata$Outbound` instead. */
  export type Outbound = TransactionIdentifierResponseMetadata$Outbound;
}

export function transactionIdentifierResponseMetadataToJSON(
  transactionIdentifierResponseMetadata: TransactionIdentifierResponseMetadata,
): string {
  return JSON.stringify(
    TransactionIdentifierResponseMetadata$outboundSchema.parse(
      transactionIdentifierResponseMetadata,
    ),
  );
}

export function transactionIdentifierResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionIdentifierResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionIdentifierResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionIdentifierResponseMetadata' from JSON`,
  );
}

/** @internal */
export const TransactionIdentifierResponse$inboundSchema: z.ZodType<
  TransactionIdentifierResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_identifier: TransactionIdentifier$inboundSchema,
  metadata: z.lazy(() => TransactionIdentifierResponseMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_identifier": "transactionIdentifier",
  });
});

/** @internal */
export type TransactionIdentifierResponse$Outbound = {
  transaction_identifier: TransactionIdentifier$Outbound;
  metadata?: TransactionIdentifierResponseMetadata$Outbound | undefined;
};

/** @internal */
export const TransactionIdentifierResponse$outboundSchema: z.ZodType<
  TransactionIdentifierResponse$Outbound,
  z.ZodTypeDef,
  TransactionIdentifierResponse
> = z.object({
  transactionIdentifier: TransactionIdentifier$outboundSchema,
  metadata: z.lazy(() => TransactionIdentifierResponseMetadata$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    transactionIdentifier: "transaction_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionIdentifierResponse$ {
  /** @deprecated use `TransactionIdentifierResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionIdentifierResponse$inboundSchema;
  /** @deprecated use `TransactionIdentifierResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionIdentifierResponse$outboundSchema;
  /** @deprecated use `TransactionIdentifierResponse$Outbound` instead. */
  export type Outbound = TransactionIdentifierResponse$Outbound;
}

export function transactionIdentifierResponseToJSON(
  transactionIdentifierResponse: TransactionIdentifierResponse,
): string {
  return JSON.stringify(
    TransactionIdentifierResponse$outboundSchema.parse(
      transactionIdentifierResponse,
    ),
  );
}

export function transactionIdentifierResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionIdentifierResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionIdentifierResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionIdentifierResponse' from JSON`,
  );
}
