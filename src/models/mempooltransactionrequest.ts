/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NetworkIdentifier,
  NetworkIdentifier$inboundSchema,
  NetworkIdentifier$Outbound,
  NetworkIdentifier$outboundSchema,
} from "./networkidentifier.js";
import {
  TransactionIdentifier,
  TransactionIdentifier$inboundSchema,
  TransactionIdentifier$Outbound,
  TransactionIdentifier$outboundSchema,
} from "./transactionidentifier.js";

/**
 * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
 */
export type MempoolTransactionRequest = {
  /**
   * The network_identifier specifies which network a particular object is associated with.
   */
  networkIdentifier: NetworkIdentifier;
  /**
   * The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool.
   */
  transactionIdentifier: TransactionIdentifier;
};

/** @internal */
export const MempoolTransactionRequest$inboundSchema: z.ZodType<
  MempoolTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network_identifier: NetworkIdentifier$inboundSchema,
  transaction_identifier: TransactionIdentifier$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "network_identifier": "networkIdentifier",
    "transaction_identifier": "transactionIdentifier",
  });
});

/** @internal */
export type MempoolTransactionRequest$Outbound = {
  network_identifier: NetworkIdentifier$Outbound;
  transaction_identifier: TransactionIdentifier$Outbound;
};

/** @internal */
export const MempoolTransactionRequest$outboundSchema: z.ZodType<
  MempoolTransactionRequest$Outbound,
  z.ZodTypeDef,
  MempoolTransactionRequest
> = z.object({
  networkIdentifier: NetworkIdentifier$outboundSchema,
  transactionIdentifier: TransactionIdentifier$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    networkIdentifier: "network_identifier",
    transactionIdentifier: "transaction_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MempoolTransactionRequest$ {
  /** @deprecated use `MempoolTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = MempoolTransactionRequest$inboundSchema;
  /** @deprecated use `MempoolTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = MempoolTransactionRequest$outboundSchema;
  /** @deprecated use `MempoolTransactionRequest$Outbound` instead. */
  export type Outbound = MempoolTransactionRequest$Outbound;
}

export function mempoolTransactionRequestToJSON(
  mempoolTransactionRequest: MempoolTransactionRequest,
): string {
  return JSON.stringify(
    MempoolTransactionRequest$outboundSchema.parse(mempoolTransactionRequest),
  );
}

export function mempoolTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<MempoolTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MempoolTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MempoolTransactionRequest' from JSON`,
  );
}
