/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BlockIdentifier,
  BlockIdentifier$inboundSchema,
  BlockIdentifier$Outbound,
  BlockIdentifier$outboundSchema,
} from "./blockidentifier.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Peer,
  Peer$inboundSchema,
  Peer$Outbound,
  Peer$outboundSchema,
} from "./peer.js";
import {
  SyncStatus,
  SyncStatus$inboundSchema,
  SyncStatus$Outbound,
  SyncStatus$outboundSchema,
} from "./syncstatus.js";

/**
 * NetworkStatusResponse contains basic information about the node's view of a blockchain network. It is assumed that any BlockIdentifier.Index less than or equal to CurrentBlockIdentifier.Index can be queried. If a Rosetta implementation prunes historical state, it should populate the optional `oldest_block_identifier` field with the oldest block available to query. If this is not populated, it is assumed that the `genesis_block_identifier` is the oldest queryable block. If a Rosetta implementation performs some pre-sync before it is possible to query blocks, sync_status should be populated so that clients can still monitor healthiness. Without this field, it may appear that the implementation is stuck syncing and needs to be terminated.
 */
export type NetworkStatusResponse = {
  /**
   * The block_identifier uniquely identifies a block in a particular network.
   */
  currentBlockIdentifier: BlockIdentifier;
  /**
   * The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.
   */
  currentBlockTimestamp: number;
  /**
   * The block_identifier uniquely identifies a block in a particular network.
   */
  genesisBlockIdentifier: BlockIdentifier;
  /**
   * The block_identifier uniquely identifies a block in a particular network.
   */
  oldestBlockIdentifier?: BlockIdentifier | undefined;
  /**
   * SyncStatus is used to provide additional context about an implementation's sync status. This object is often used by implementations to indicate healthiness when block data cannot be queried until some sync phase completes or cannot be determined by comparing the timestamp of the most recent block with the current time.
   */
  syncStatus?: SyncStatus | undefined;
  peers?: Array<Peer> | undefined;
};

/** @internal */
export const NetworkStatusResponse$inboundSchema: z.ZodType<
  NetworkStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_block_identifier: BlockIdentifier$inboundSchema,
  current_block_timestamp: z.number().int(),
  genesis_block_identifier: BlockIdentifier$inboundSchema,
  oldest_block_identifier: BlockIdentifier$inboundSchema.optional(),
  sync_status: SyncStatus$inboundSchema.optional(),
  peers: z.array(Peer$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "current_block_identifier": "currentBlockIdentifier",
    "current_block_timestamp": "currentBlockTimestamp",
    "genesis_block_identifier": "genesisBlockIdentifier",
    "oldest_block_identifier": "oldestBlockIdentifier",
    "sync_status": "syncStatus",
  });
});

/** @internal */
export type NetworkStatusResponse$Outbound = {
  current_block_identifier: BlockIdentifier$Outbound;
  current_block_timestamp: number;
  genesis_block_identifier: BlockIdentifier$Outbound;
  oldest_block_identifier?: BlockIdentifier$Outbound | undefined;
  sync_status?: SyncStatus$Outbound | undefined;
  peers?: Array<Peer$Outbound> | undefined;
};

/** @internal */
export const NetworkStatusResponse$outboundSchema: z.ZodType<
  NetworkStatusResponse$Outbound,
  z.ZodTypeDef,
  NetworkStatusResponse
> = z.object({
  currentBlockIdentifier: BlockIdentifier$outboundSchema,
  currentBlockTimestamp: z.number().int(),
  genesisBlockIdentifier: BlockIdentifier$outboundSchema,
  oldestBlockIdentifier: BlockIdentifier$outboundSchema.optional(),
  syncStatus: SyncStatus$outboundSchema.optional(),
  peers: z.array(Peer$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    currentBlockIdentifier: "current_block_identifier",
    currentBlockTimestamp: "current_block_timestamp",
    genesisBlockIdentifier: "genesis_block_identifier",
    oldestBlockIdentifier: "oldest_block_identifier",
    syncStatus: "sync_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkStatusResponse$ {
  /** @deprecated use `NetworkStatusResponse$inboundSchema` instead. */
  export const inboundSchema = NetworkStatusResponse$inboundSchema;
  /** @deprecated use `NetworkStatusResponse$outboundSchema` instead. */
  export const outboundSchema = NetworkStatusResponse$outboundSchema;
  /** @deprecated use `NetworkStatusResponse$Outbound` instead. */
  export type Outbound = NetworkStatusResponse$Outbound;
}

export function networkStatusResponseToJSON(
  networkStatusResponse: NetworkStatusResponse,
): string {
  return JSON.stringify(
    NetworkStatusResponse$outboundSchema.parse(networkStatusResponse),
  );
}

export function networkStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<NetworkStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkStatusResponse' from JSON`,
  );
}
