/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";

/**
 * BlockEventType determines if a BlockEvent represents the addition or removal of a block.
 */
export const BlockEventType = {
  BlockAdded: "block_added",
  BlockRemoved: "block_removed",
} as const;
/**
 * BlockEventType determines if a BlockEvent represents the addition or removal of a block.
 */
export type BlockEventType = ClosedEnum<typeof BlockEventType>;

/** @internal */
export const BlockEventType$inboundSchema: z.ZodNativeEnum<
  typeof BlockEventType
> = z.nativeEnum(BlockEventType);

/** @internal */
export const BlockEventType$outboundSchema: z.ZodNativeEnum<
  typeof BlockEventType
> = BlockEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockEventType$ {
  /** @deprecated use `BlockEventType$inboundSchema` instead. */
  export const inboundSchema = BlockEventType$inboundSchema;
  /** @deprecated use `BlockEventType$outboundSchema` instead. */
  export const outboundSchema = BlockEventType$outboundSchema;
}
